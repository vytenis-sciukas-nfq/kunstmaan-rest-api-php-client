<?php
/**
 * Seo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Šiaulių Bankas REST API
 *
 * Šiaulių Bankas REST API provides secure and efficient access to application data, enabling seamless data synchronization between Šiaulių Bankas and external systems.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Seo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Seo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Seo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'meta_title' => 'string',
        'meta_description' => 'string',
        'meta_author' => 'string',
        'meta_robots' => 'string',
        'og_type' => 'string',
        'og_title' => 'string',
        'og_description' => 'string',
        'extra_meta_data' => 'string',
        'og_image' => '\OpenAPI\Client\Model\Media'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'meta_title' => null,
        'meta_description' => null,
        'meta_author' => null,
        'meta_robots' => null,
        'og_type' => null,
        'og_title' => null,
        'og_description' => null,
        'extra_meta_data' => null,
        'og_image' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'meta_title' => false,
        'meta_description' => false,
        'meta_author' => false,
        'meta_robots' => false,
        'og_type' => false,
        'og_title' => false,
        'og_description' => false,
        'extra_meta_data' => false,
        'og_image' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'meta_title' => 'metaTitle',
        'meta_description' => 'metaDescription',
        'meta_author' => 'metaAuthor',
        'meta_robots' => 'metaRobots',
        'og_type' => 'ogType',
        'og_title' => 'ogTitle',
        'og_description' => 'ogDescription',
        'extra_meta_data' => 'extraMetaData',
        'og_image' => 'ogImage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'meta_title' => 'setMetaTitle',
        'meta_description' => 'setMetaDescription',
        'meta_author' => 'setMetaAuthor',
        'meta_robots' => 'setMetaRobots',
        'og_type' => 'setOgType',
        'og_title' => 'setOgTitle',
        'og_description' => 'setOgDescription',
        'extra_meta_data' => 'setExtraMetaData',
        'og_image' => 'setOgImage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'meta_title' => 'getMetaTitle',
        'meta_description' => 'getMetaDescription',
        'meta_author' => 'getMetaAuthor',
        'meta_robots' => 'getMetaRobots',
        'og_type' => 'getOgType',
        'og_title' => 'getOgTitle',
        'og_description' => 'getOgDescription',
        'extra_meta_data' => 'getExtraMetaData',
        'og_image' => 'getOgImage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('meta_title', $data ?? [], null);
        $this->setIfExists('meta_description', $data ?? [], null);
        $this->setIfExists('meta_author', $data ?? [], null);
        $this->setIfExists('meta_robots', $data ?? [], null);
        $this->setIfExists('og_type', $data ?? [], null);
        $this->setIfExists('og_title', $data ?? [], null);
        $this->setIfExists('og_description', $data ?? [], null);
        $this->setIfExists('extra_meta_data', $data ?? [], null);
        $this->setIfExists('og_image', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets meta_title
     *
     * @return string|null
     */
    public function getMetaTitle()
    {
        return $this->container['meta_title'];
    }

    /**
     * Sets meta_title
     *
     * @param string|null $meta_title meta_title
     *
     * @return self
     */
    public function setMetaTitle($meta_title)
    {
        if (is_null($meta_title)) {
            throw new \InvalidArgumentException('non-nullable meta_title cannot be null');
        }
        $this->container['meta_title'] = $meta_title;

        return $this;
    }

    /**
     * Gets meta_description
     *
     * @return string|null
     */
    public function getMetaDescription()
    {
        return $this->container['meta_description'];
    }

    /**
     * Sets meta_description
     *
     * @param string|null $meta_description meta_description
     *
     * @return self
     */
    public function setMetaDescription($meta_description)
    {
        if (is_null($meta_description)) {
            throw new \InvalidArgumentException('non-nullable meta_description cannot be null');
        }
        $this->container['meta_description'] = $meta_description;

        return $this;
    }

    /**
     * Gets meta_author
     *
     * @return string|null
     */
    public function getMetaAuthor()
    {
        return $this->container['meta_author'];
    }

    /**
     * Sets meta_author
     *
     * @param string|null $meta_author meta_author
     *
     * @return self
     */
    public function setMetaAuthor($meta_author)
    {
        if (is_null($meta_author)) {
            throw new \InvalidArgumentException('non-nullable meta_author cannot be null');
        }
        $this->container['meta_author'] = $meta_author;

        return $this;
    }

    /**
     * Gets meta_robots
     *
     * @return string|null
     */
    public function getMetaRobots()
    {
        return $this->container['meta_robots'];
    }

    /**
     * Sets meta_robots
     *
     * @param string|null $meta_robots meta_robots
     *
     * @return self
     */
    public function setMetaRobots($meta_robots)
    {
        if (is_null($meta_robots)) {
            throw new \InvalidArgumentException('non-nullable meta_robots cannot be null');
        }
        $this->container['meta_robots'] = $meta_robots;

        return $this;
    }

    /**
     * Gets og_type
     *
     * @return string|null
     */
    public function getOgType()
    {
        return $this->container['og_type'];
    }

    /**
     * Sets og_type
     *
     * @param string|null $og_type og_type
     *
     * @return self
     */
    public function setOgType($og_type)
    {
        if (is_null($og_type)) {
            throw new \InvalidArgumentException('non-nullable og_type cannot be null');
        }
        $this->container['og_type'] = $og_type;

        return $this;
    }

    /**
     * Gets og_title
     *
     * @return string|null
     */
    public function getOgTitle()
    {
        return $this->container['og_title'];
    }

    /**
     * Sets og_title
     *
     * @param string|null $og_title og_title
     *
     * @return self
     */
    public function setOgTitle($og_title)
    {
        if (is_null($og_title)) {
            throw new \InvalidArgumentException('non-nullable og_title cannot be null');
        }
        $this->container['og_title'] = $og_title;

        return $this;
    }

    /**
     * Gets og_description
     *
     * @return string|null
     */
    public function getOgDescription()
    {
        return $this->container['og_description'];
    }

    /**
     * Sets og_description
     *
     * @param string|null $og_description og_description
     *
     * @return self
     */
    public function setOgDescription($og_description)
    {
        if (is_null($og_description)) {
            throw new \InvalidArgumentException('non-nullable og_description cannot be null');
        }
        $this->container['og_description'] = $og_description;

        return $this;
    }

    /**
     * Gets extra_meta_data
     *
     * @return string|null
     */
    public function getExtraMetaData()
    {
        return $this->container['extra_meta_data'];
    }

    /**
     * Sets extra_meta_data
     *
     * @param string|null $extra_meta_data extra_meta_data
     *
     * @return self
     */
    public function setExtraMetaData($extra_meta_data)
    {
        if (is_null($extra_meta_data)) {
            throw new \InvalidArgumentException('non-nullable extra_meta_data cannot be null');
        }
        $this->container['extra_meta_data'] = $extra_meta_data;

        return $this;
    }

    /**
     * Gets og_image
     *
     * @return \OpenAPI\Client\Model\Media|null
     */
    public function getOgImage()
    {
        return $this->container['og_image'];
    }

    /**
     * Sets og_image
     *
     * @param \OpenAPI\Client\Model\Media|null $og_image og_image
     *
     * @return self
     */
    public function setOgImage($og_image)
    {
        if (is_null($og_image)) {
            throw new \InvalidArgumentException('non-nullable og_image cannot be null');
        }
        $this->container['og_image'] = $og_image;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


