<?php
/**
 * PutApiPage
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  NFQ\KunstmaanRestApi\PhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Šiaulių Bankas REST API
 *
 * Šiaulių Bankas REST API provides secure and efficient access to application data, enabling seamless data synchronization between Šiaulių Bankas and external systems.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.10.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NFQ\KunstmaanRestApi\PhpClient\Model;

use \ArrayAccess;
use \NFQ\KunstmaanRestApi\PhpClient\ObjectSerializer;

/**
 * PutApiPage Class Doc Comment
 *
 * @category Class
 * @package  NFQ\KunstmaanRestApi\PhpClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PutApiPage implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PutApiPage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'page' => '\NFQ\KunstmaanRestApi\PhpClient\Model\ApiEntity',
        'pageTemplate' => '\NFQ\KunstmaanRestApi\PhpClient\Model\ApiPageTemplate',
        'node' => '\NFQ\KunstmaanRestApi\PhpClient\Model\PostNode',
        'seo' => '\NFQ\KunstmaanRestApi\PhpClient\Model\Seo',
        'author' => '\NFQ\KunstmaanRestApi\PhpClient\Model\Author',
        'nodeTranslation' => '\NFQ\KunstmaanRestApi\PhpClient\Model\PostNodeTranslation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'page' => null,
        'pageTemplate' => null,
        'node' => null,
        'seo' => null,
        'author' => null,
        'nodeTranslation' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'page' => false,
        'pageTemplate' => false,
        'node' => false,
        'seo' => false,
        'author' => false,
        'nodeTranslation' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'page' => 'page',
        'pageTemplate' => 'page_template',
        'node' => 'node',
        'seo' => 'seo',
        'author' => 'author',
        'nodeTranslation' => 'node_translation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'page' => 'setPage',
        'pageTemplate' => 'setPageTemplate',
        'node' => 'setNode',
        'seo' => 'setSeo',
        'author' => 'setAuthor',
        'nodeTranslation' => 'setNodeTranslation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'page' => 'getPage',
        'pageTemplate' => 'getPageTemplate',
        'node' => 'getNode',
        'seo' => 'getSeo',
        'author' => 'getAuthor',
        'nodeTranslation' => 'getNodeTranslation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('page', $data ?? [], null);
        $this->setIfExists('pageTemplate', $data ?? [], null);
        $this->setIfExists('node', $data ?? [], null);
        $this->setIfExists('seo', $data ?? [], null);
        $this->setIfExists('author', $data ?? [], null);
        $this->setIfExists('nodeTranslation', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets page
     *
     * @return \NFQ\KunstmaanRestApi\PhpClient\Model\ApiEntity|null
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param \NFQ\KunstmaanRestApi\PhpClient\Model\ApiEntity|null $page page
     *
     * @return self
     */
    public function setPage($page)
    {
        if (is_null($page)) {
            throw new \InvalidArgumentException('non-nullable page cannot be null');
        }
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets pageTemplate
     *
     * @return \NFQ\KunstmaanRestApi\PhpClient\Model\ApiPageTemplate|null
     */
    public function getPageTemplate()
    {
        return $this->container['pageTemplate'];
    }

    /**
     * Sets pageTemplate
     *
     * @param \NFQ\KunstmaanRestApi\PhpClient\Model\ApiPageTemplate|null $pageTemplate pageTemplate
     *
     * @return self
     */
    public function setPageTemplate($pageTemplate)
    {
        if (is_null($pageTemplate)) {
            throw new \InvalidArgumentException('non-nullable pageTemplate cannot be null');
        }
        $this->container['pageTemplate'] = $pageTemplate;

        return $this;
    }

    /**
     * Gets node
     *
     * @return \NFQ\KunstmaanRestApi\PhpClient\Model\PostNode|null
     */
    public function getNode()
    {
        return $this->container['node'];
    }

    /**
     * Sets node
     *
     * @param \NFQ\KunstmaanRestApi\PhpClient\Model\PostNode|null $node node
     *
     * @return self
     */
    public function setNode($node)
    {
        if (is_null($node)) {
            throw new \InvalidArgumentException('non-nullable node cannot be null');
        }
        $this->container['node'] = $node;

        return $this;
    }

    /**
     * Gets seo
     *
     * @return \NFQ\KunstmaanRestApi\PhpClient\Model\Seo|null
     */
    public function getSeo()
    {
        return $this->container['seo'];
    }

    /**
     * Sets seo
     *
     * @param \NFQ\KunstmaanRestApi\PhpClient\Model\Seo|null $seo seo
     *
     * @return self
     */
    public function setSeo($seo)
    {
        if (is_null($seo)) {
            throw new \InvalidArgumentException('non-nullable seo cannot be null');
        }
        $this->container['seo'] = $seo;

        return $this;
    }

    /**
     * Gets author
     *
     * @return \NFQ\KunstmaanRestApi\PhpClient\Model\Author|null
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param \NFQ\KunstmaanRestApi\PhpClient\Model\Author|null $author author
     *
     * @return self
     */
    public function setAuthor($author)
    {
        if (is_null($author)) {
            throw new \InvalidArgumentException('non-nullable author cannot be null');
        }
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets nodeTranslation
     *
     * @return \NFQ\KunstmaanRestApi\PhpClient\Model\PostNodeTranslation|null
     */
    public function getNodeTranslation()
    {
        return $this->container['nodeTranslation'];
    }

    /**
     * Sets nodeTranslation
     *
     * @param \NFQ\KunstmaanRestApi\PhpClient\Model\PostNodeTranslation|null $nodeTranslation nodeTranslation
     *
     * @return self
     */
    public function setNodeTranslation($nodeTranslation)
    {
        if (is_null($nodeTranslation)) {
            throw new \InvalidArgumentException('non-nullable nodeTranslation cannot be null');
        }
        $this->container['nodeTranslation'] = $nodeTranslation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


